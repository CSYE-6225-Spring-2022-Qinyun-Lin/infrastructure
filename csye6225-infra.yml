AWSTemplateFormatVersion: "2010-09-09"
Description: A sample template for CSYE6225 assignment
Parameters:
  VpcCidrBlock:
    Description: "Cidr block for VPC"
    Type: String
    Default: "10.0.0.0/16"
  SubCidrBlockA:
    Description: "Cidr block for subnet a"
    Type: String
    Default: "10.0.0.0/24"
  SubCidrBlockB:
    Description: "Cidr block for subnet b"
    Type: String
    Default: "10.0.1.0/24"
  SubCidrBlockC:
    Description: "Cidr block for subnet c"
    Type: String
    Default: "10.0.2.0/24"
  PrivateSubCidrBlockA:
    Description: "Cidr block for private subnet a"
    Type: String
    Default: "10.0.3.0/24"
  PrivateSubCidrBlockB:
    Description: "Cidr block for private subnet b"
    Type: String
    Default: "10.0.4.0/24"
  PrivateSubCidrBlockC:
    Description: "Cidr block for private subnet c"
    Type: String
    Default: "10.0.5.0/24"
  DestinationCIDRblock:
    Description: "Cidr block for destination in route table"
    Type: String
    Default: "0.0.0.0/0"
  AMIid:
    Description: "Amazon Machine Image Id"
    Type: String
    Default: "ami-0ac35fc045df0d364"
  CurrentProfile:
    Type: String
    Default: "demo"
  ProdProfile:
    Type: String
    Default: "demo"
  DbUserName:
    Type: String
    Default: "csye6225"
  DbUserPassword:
    Type: String
    Default: "adminadmin!"
  CodeDeployBucketName:
    Description: CodeDeploy Bucket name
    Type: String
    Default: csye6225-linqinyun-codedeploy-bucket
  CodeDeployApplicationName:
    Description: CodeDeploy application name
    Type: String
    Default: csye6225-webapp
  CodeDeployGroupName:
    Description: CodeDeploy group name
    Type: String
    Default: csye6225-webapp-deployment


Conditions:
  UseProdCondition: !Equals [!Ref CurrentProfile, !Ref ProdProfile]


Resources:
  #================================ VPC resources ================================
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
       - Key: Name
         Value: !Ref AWS::StackName

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId:
        Ref: myVPC
      AvailabilityZone: "us-east-1a"
      CidrBlock: !Ref SubCidrBlockA
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: !Sub PublicSubA-${AWS::StackName}
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId:
        Ref: myVPC
      AvailabilityZone: "us-east-1b"
      CidrBlock: !Ref SubCidrBlockB
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: !Sub PublicSubB-${AWS::StackName}
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref myVPC
      AvailabilityZone: "us-east-1c"
      CidrBlock: !Ref SubCidrBlockC
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: !Sub PublicSubC-${AWS::StackName}
  
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId:
        Ref: myVPC
      AvailabilityZone: "us-east-1a"
      CidrBlock: !Ref PrivateSubCidrBlockA
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Sub PrivateSubA-${AWS::StackName}
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId:
        Ref: myVPC
      AvailabilityZone: "us-east-1b"
      CidrBlock: !Ref PrivateSubCidrBlockB
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Sub PrivateSubB-${AWS::StackName}
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref myVPC
      AvailabilityZone: "us-east-1c"
      CidrBlock: !Ref PrivateSubCidrBlockC
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Sub PrivateSubC-${AWS::StackName}

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref DestinationCIDRblock
      GatewayId: !Ref InternetGateway
  
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

  PublicSubnetRouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociationC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable


  #================================ Security resources ================================
  applicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "application Security Group"
      VpcId: !Ref myVPC
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: 0
        ToPort: 0
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref loadBalancerSecurityGroup
      - IpProtocol: tcp
        FromPort: 3333
        ToPort: 3333
        SourceSecurityGroupId: !Ref loadBalancerSecurityGroup
  databaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "database Security Group"
      VpcId: !Ref myVPC
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: 0
        ToPort: 0
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref applicationSecurityGroup
  loadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "load balancer Security Group"
      VpcId: !Ref myVPC
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: 0
        ToPort: 0
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      # - IpProtocol: tcp
      #   FromPort: 80
      #   ToPort: 80
      #   CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0


  #================================ Code Deploy resources ================================
  codeDeploymentGroup: 
    Type: AWS::CodeDeploy::DeploymentGroup 
    Properties:
      ApplicationName: !Ref CodeDeployApplicationName
      DeploymentGroupName: !Ref CodeDeployGroupName
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentStyle:
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      AutoScalingGroups:
        - !Ref asgWebApp
      Deployment:
        IgnoreApplicationStopFailures: true
        Revision:
          RevisionType: S3
          S3Location:
            Bucket: !Ref CodeDeployBucketName
            BundleType: Zip
            Key: webservice.zip
      # AutoRollbackConfiguration:
      #   Enabled: true
      #   Events:
      #     - DEPLOYMENT_FAILURE
      Ec2TagFilters:
        -
          Type: KEY_AND_VALUE
          Key: Application
          Value: WebApp
      ServiceRoleArn: 
        Fn::GetAtt: [CodeDeployServiceRole, Arn]


  #================================ IAM resources ================================
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: ec2-instance-profile
      Path: /
      Roles: 
       - EC2ServiceRole

  webAppS3Policy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource: [
                !Sub "arn:aws:s3:::${myBucket}",
                !Sub "arn:aws:s3:::${myBucket}/*"
            ]
            Action:
              - 's3:GetObject*'
              - 's3:PutObject*'
              - 's3:DeleteObject*'
      PolicyName: "WebAppS3"
      Roles: 
        - EC2ServiceRole  
  webAppServerlessLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource: "*"
            Action:
              - 'sns:List*'
              - 'sns:Get*'
              - 'sns:Pub*'
              - "dynamodb:Get*"
              - "dynamodb:Put*"
      PolicyName: "WebAppServerless"
      Roles: 
        - EC2ServiceRole
  CodeDeployServiceRole:
    # used for CodeDeployMent Group
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      RoleName: CodeDeployServiceRole


  #================================ Auto Scaling resources ================================
  asgLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template'
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: "gp2"
            Encrypted: true
            KmsKeyId: 
              Fn::GetAtt: [EbsVolumeKey, Arn]
            DeleteOnTermination: true
        ImageId: !Ref AMIid
        InstanceType: t2.micro
        SecurityGroupIds: 
          - !Ref applicationSecurityGroup
        IamInstanceProfile: 
          Name: !Ref InstanceProfile
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              yum update -y

              # create credentials
              cd /home/ec2-user/
              mkdir webConfig
              cd webConfig
              echo "${myBucket}" > bucket_name.txt
              echo "${myRDSInstance.Endpoint.Address}" > mysql_host.txt
              echo "${DbUserName}, ${DbUserPassword}" > mysql_key.txt

              # set up database
              cd ../webservice
              wget https://truststore.pki.rds.amazonaws.com/us-east-1/us-east-1-bundle.pem
              python3 src/db_operation.py

              # add webapp to systemd
              cp /home/ec2-user/webservice/systemd/webapp.service /etc/systemd/system/webapp.service
              chmod 644 /etc/systemd/system/webapp.service
              yum install systemd -y
              systemctl daemon-reload
              systemctl enable webapp.service
              systemctl start webapp.service

              # set up CloudWatch
              cp /home/ec2-user/webservice/cloudwatch_config/cloudwatch-config.json /opt/cloudwatch-config.json
              sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/cloudwatch-config.json -s

              # aws deploy create-deployment --application-name ${CodeDeployApplicationName} --region us-east-1 --deployment-group-name ${CodeDeployGroupName} --s3-location bucket=${CodeDeployBucketName},key=webservice.zip,bundleType=zip

  EbsVolumeKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: A symmetric KMS key for Ebs Volume
      EnableKeyRotation: true
      PendingWindowInDays: 7
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: 
                - !Sub "arn:aws:iam::${AWS::AccountId}:role/EC2ServiceRole"
                - !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: 
                - !Sub "arn:aws:iam::${AWS::AccountId}:role/EC2ServiceRole"
                - !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
            Resource: '*'

  asgWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
      Cooldown: '60'
      DesiredCapacity: '1'
      HealthCheckGracePeriod: 90
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref asgLaunchTemplate
        Version: !GetAtt asgLaunchTemplate.LatestVersionNumber
      MaxSize: '5'
      MinSize: '1'
      NewInstancesProtectedFromScaleIn: false
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref loadBalancerTargetGroup
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
        - !Ref PublicSubnetC
  asgScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref asgWebApp
      AdjustmentType: ChangeInCapacity
      Cooldown: 60
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
  asgScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref asgWebApp
      AdjustmentType: ChangeInCapacity
      Cooldown: 60
      PolicyType: SimpleScaling
      ScalingAdjustment: -1

  CPUAlarmHigh:
     Type: AWS::CloudWatch::Alarm
     Properties:
        AlarmDescription: "Scale-up if CPU > 5% for 60 seconds"
        MetricName: CPUUtilization
        Namespace: AWS/EC2
        Statistic: Average
        Period: 60
        EvaluationPeriods: 1
        Threshold: 5
        TreatMissingData: notBreaching
        AlarmActions: 
          - !Ref asgScaleUpPolicy
        Dimensions:
          - Name: AutoScalingGroupName
            Value: !Ref asgWebApp
        ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
     Type: AWS::CloudWatch::Alarm
     Properties:
        AlarmDescription: "Scale-up if CPU < 3% for 60 seconds"
        MetricName: CPUUtilization
        Namespace: AWS/EC2
        Statistic: Average
        Period: 60
        EvaluationPeriods: 1
        Threshold: 3
        TreatMissingData: notBreaching
        AlarmActions: 
          - !Ref asgScaleDownPolicy
        Dimensions:
          - Name: AutoScalingGroupName
            Value: !Ref asgWebApp
        ComparisonOperator: LessThanThreshold

  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref loadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
        - !Ref PublicSubnetC
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
        - Key: InternetGatewayId
          Value: !Ref InternetGateway
      Type: application
  loadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/healthz'
      HealthCheckPort: '3333'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 3333
      Protocol: 'HTTP'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref myVPC
  loadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref loadBalancerTargetGroup
      LoadBalancerArn: !Ref loadBalancer
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:399550114864:certificate/cb969e44-a814-4a7d-97ae-fb92a534054d
      Port: 443
      Protocol: HTTPS


  #================================ DNS and Bucket resources ================================
  myDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: Z033869737D9XVC8CR2UB
      Comment: Zone apex alias targeted to LoadBalancer.
      RecordSets:
      - Name: prod.linqinyun.me
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt 'loadBalancer.CanonicalHostedZoneID'
          DNSName: !GetAtt 'loadBalancer.DNSName'

  myBucket:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      BucketName: 
        !If [UseProdCondition, 
        !Join ['.', [!Select [2, !Split ['/', !Ref AWS::StackId]], "prod.linqinyun.me"]], 
        !Join ['.', [!Select [2, !Split ['/', !Ref AWS::StackId]], "dev.linqinyun.me"]]]
      LifecycleConfiguration:
        Rules:
          - Id: STANDARD_IA_Rule
            Status: Enabled
            ExpirationInDays: 31
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA


  #================================ DataBase resources ================================
  myRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties: 
      DBName: "csye6225"
      Engine: "mysql"
      EngineVersion: "5.7.37"
      DBInstanceClass: "db.t3.micro"
      AllocatedStorage: "5"
      DBInstanceIdentifier: "csye6225"
      MasterUsername: !Ref DbUserName
      MasterUserPassword: !Ref DbUserPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBParameterGroupName: !Ref DBParameterGroup
      VPCSecurityGroups: 
        - !Ref databaseSecurityGroup
      PubliclyAccessible: false
      MultiAZ: false
      # OptionGroupName: !Ref OracleRDSOptionGroup
      StorageEncrypted: true
      KmsKeyId: 
        Fn::GetAtt: [RdsInstanceKey, Arn]

  RdsInstanceKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: A symmetric KMS key for RDS instance
      EnableKeyRotation: true
      PendingWindowInDays: 7
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-default-2
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:role/EC2ServiceRole"
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:role/EC2ServiceRole"
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
            Resource: '*'

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: "Subnet group"
      DBSubnetGroupName: "mySubnetGroup"
      SubnetIds: 
        [!Ref PrivateSubnetA, !Ref PrivateSubnetB]

  DBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: Custom Parameter Group
      Family: mysql5.7
      Parameters:
        sql_mode: IGNORE_SPACE
        max_allowed_packet: 1024


  # OracleRDSOptionGroup:
  #   Type: AWS::RDS::OptionGroup
  #   Properties: 
  #     OptionGroupDescription: oracle-options-group
  #     EngineName: mysql
  #     MajorEngineVersion: "5.7"
  #     OptionConfigurations:
  #       -
  #         OptionName: SSL
  #         OptionSettings:
  #           -
  #             Name: SQLNET.SSL_VERSION
  #             Value: 1.2

  myDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "UserId"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "UserId"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
      TableName: csye6225-token
      TimeToLiveSpecification: 
        AttributeName: "ExpireTime"
        Enabled: true


  #================================ Serverless resources ================================
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyEmailSenderFunction
      Handler: lambda_function.lambda_handler
      Role: 
        Fn::GetAtt: [LambdaExecutionRole, Arn]
      Code:
        S3Bucket: !Ref CodeDeployBucketName
        S3Key: lambda_handler.zip
      PackageType: Zip
      Runtime: python3.6
      Timeout: 10
      TracingConfig:
        Mode: Active
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                # - ec2.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole
      RoleName: LambdaExecutionRole
  LambdaExecutionPloicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ses:SendEmail"
              - "ses:SendRawEmail"
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "dynamodb:Get*"
              - "dynamodb:Put*"
            Resource: "*"
      PolicyName: "Lambda-Execution-Ploicy"
      Roles:
        - !Ref LambdaExecutionRole
  LambdaInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:  !Ref SNSTopic 
      FunctionName: !Ref LambdaFunction

  SNSTopic: 
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: sns-topic-for-lambda
      TopicName: sns-topic-for-lambda
      Subscription:  
      - Endpoint: !GetAtt LambdaFunction.Arn
        Protocol: lambda
